---
swagger: "2.0"
info:
  description: "A simple distributed job scheduler running on top of AWS"
  version: "1.0.0"
  title: "DistributedCronScheduler"
  contact:
    email: "apollo-anonymous+demo@amazon.com"
host: "2xu092dlv9.execute-api.us-east-1.amazonaws.com"
basePath: "/Alpha"
tags:
- name: "jobs"
  description: "All job scheduling APIs"
schemes:
- "https"
paths:
  /jobs:
    get:
      tags:
      - "jobs"
      summary: "Gets all jobs"
      description: "Gets all jobs"
      operationId: "getJobs"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Job"
  /job:
    post:
      tags:
      - "jobs"
      summary: "Add a new job defination"
      description: ""
      operationId: "addJob"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Job defination that we want to add"
        required: true
        schema:
          $ref: "#/definitions/Job"
        x-exportParamName: "Body"
      responses:
        "405":
          description: "Invalid input"
    put:
      tags:
      - "jobs"
      summary: "Update an existing job"
      description: ""
      operationId: "updateJob"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Job object that needs to be added"
        required: true
        schema:
          $ref: "#/definitions/Job"
        x-exportParamName: "Body"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Job not found"
        "405":
          description: "Validation exception"
  /job/findByStatus:
    get:
      tags:
      - "jobs"
      summary: "Finds Jobs by status"
      description: "Multiple status values can be provided with comma separated strings"
      operationId: "findJobsByStatus"
      produces:
      - "application/json"
      parameters:
      - name: "status"
        in: "query"
        description: "Status values that need to be considered for filter"
        required: true
        type: "array"
        items:
          type: "string"
          default: "created"
          enum:
          - "created"
          - "running"
          - "completed"
        collectionFormat: "multi"
        x-exportParamName: "Status"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Job"
        "400":
          description: "Invalid status value"
  /job/{jobId}:
    get:
      tags:
      - "jobs"
      summary: "Find jobs by ID"
      description: "Returns a single job"
      operationId: "getJobById"
      produces:
      - "application/json"
      parameters:
      - name: "jobId"
        in: "path"
        description: "ID of job to return"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "JobId"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Job"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Job not found"
    delete:
      tags:
      - "jobs"
      summary: "Deletes a job"
      description: ""
      operationId: "deleteJob"
      produces:
      - "application/json"
      parameters:
      - name: "jobId"
        in: "path"
        description: "Job id to delete"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "JobId"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Job not found"
definitions:
  Job:
    type: "object"
    required:
    - "jobExecutionTargetArn"
    - "jobId"
    - "jobName"
    - "jobSchedule"
    properties:
      jobId:
        type: "integer"
        format: "int64"
      jobName:
        type: "string"
        example: "TestJob"
      jobSchedule:
        type: "string"
        example: "0/15 0 0 ? * * *"
        description: "cron expression"
      jobExecutionTargetArn:
        type: "string"
        example: "arn:aws:lambda:us-east-1:10000000000:function:job-target-lambda"
        description: "job execution target arn"
      status:
        type: "string"
        description: "job status"
        enum:
        - "created"
        - "running"
        - "completed"
    example:
      jobName: "TestJob"
      jobId: 0
      jobExecutionTargetArn: "arn:aws:lambda:us-east-1:10000000000:function:job-target-lambda"
      jobSchedule: "0/15 0 0 ? * * *"
      status: "created"
